↓CallSequence [ngx.components.UIDynamicAction-1727686162011]: 
  beanData: '{"ionBean":"CallSequenceAction","requestable":"plain:lib_BaseRow.formscommon_FieldsList"}'
  ↓SelectAllColumnsAfterInit [ngx.components.UICustomAction-1727686162038]: 
    actionValue: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
        - com.twinsoft.convertigo.beans.common.FormatedContent: 
          →: |
            '		
            		if (page["navParams"].data.noCols != ''true'')
            			page.local.show = true;
            		
            		page.local.selectedColumns = [];
            		let i = 0;
            		
            		if(page.local.target == "table"){
            			// loop through the initalSelectedColumns to handle the selected and hidden columns ordered by the 
            			// order of the columns in the initialSelectedColumns
            			page.local.initialSelectedColumns?.forEach((col, i) => {
            				if (vars.columns.find((item) => item.name == col) != undefined) {
            					var currentCol = vars.columns.find((item) => item.name == col);
            					page.local.selectedColumns.push({
            						name: col,
            						selected: true,
            						order: i,
            						id: currentCol.id,
            						type : currentCol.type,
            						hidden: page.local.initialHiddenColumns.indexOf(col) != -1,
            						table_id: currentCol.table_id,
            						link_row_table_id: currentCol.link_row_table_id
            					});
            				}
            			})
            			
            			// Now handle the rest of the columns
            			vars.columns.forEach((item, i) => {
            				// check if the column name is in the local.initialSelectedColumns and if it is
            				// set a selected boolean to true
            				let selected = false;
            				page.local.initialSelectedColumns?.forEach((col) => {
            					if (col == item.name) {
            						selected = true;
            					}
            				})
            				
            				// same for hidden columns use the local.initalHiddenColumns
            				let hidden = false;
            				page.local.initialHiddenColumns?.forEach((col) => {
            					if (col == item.name) {
            						hidden = true;
            					}
            				})
            
            				// Add the non selected columns as the selected ones are already added in the previous loop
            				if (!selected) {				
            					page.local.selectedColumns.push({
            						name : item.name,
            						// If we have initialSelected Columns then set the selected boolean to false beacuse the previous loop has already added the selected columns
            						// If not set it to true to select all columns by default
            						selected : page.local.initialSelectedColumns ? false : true,
            						order: i++,
            						id: item.id,
            						type : item.type,
            						hidden: hidden,
            						table_id: item.table_id 
            					})
            				}	
            			})
            		}
            		
            		else if(page.local.target == "select"){
            			//We do not have any initalSelectedColumns in this case so make value to be the id
            			page.local.selectedColumns["id"] = {
            				selected: true,
            				displayValue: false,
            				value: page.local.valueColumn != undefined
            					   && page.local.valueColumn.length > 0 ? 
            					   		page.local.valueColumn.indexOf(''id'') != -1 : true,
            					   	 
            				order: 0,
            				id: "id"
            			}
            			if(page.local.displayValueColumn != undefined){
            				vars.columns = vars.columns.concat([{name: "id"}]);
            			}
            			vars.columns.forEach((item, i) => {
            				// if page.local.dispayValueColumn is defined and not empty  and the column name is in it	
            				// set the displayValue boolean to true else set it false
            				let displayValue = false;
            				if (page.local.displayValueColumn != undefined && page.local.displayValueColumn.length > 0) {
            					displayValue = page.local.displayValueColumn.indexOf(item.name) != -1		
            				} else {
            					// by default the first column is the displayValue
            					if (i== 0)
            						displayValue = true;
            				}
            				
            				let selCol = {
            					// if page.local.initialSelectedColumns is defined and not empty  and the column name is in it
            					// set the selected boolean to true
            					// if it is empty select all columns
            					selected : page.local.initialSelectedColumns != undefined && page.local.initialSelectedColumns.length > 0 ? page.local.initialSelectedColumns.indexOf(item.name) != -1 : true,
            					
            					// if page.local.valueColumn is defined and not empty  and the column name is in it	
            					// set the displayValue boolean to true else set it false
            					value: page.local.valueColumn != undefined && page.local.valueColumn.length > 0 ? page.local.valueColumn.indexOf(item.name) != -1 : false,
            
            					displayValue: displayValue,
            					order: i++,
            					id: item.id,
            					table_id: item.table_id 
            				}
            				page.local.selectedColumns[item.name] = selCol
            			})
            			let str = JSON.stringify(vars.columns[0]);
            			page.local.displayColumn = vars.columns[0].name;
            			page.local.valueColumn = "id";
            			page.local.diffrentVals = false;
            			
            		}
            		
            		resolve();
            '
    ↓columns [ngx.components.UIControlVariable-1727686162041]: 
      varValue: 
        - xmlizable: 
          - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
          - MobileSmartSourceType: source:{"filter":"Sequence","project":"lib_BaseRow","input":"","model":{"data":[{"sequence":"lib_BaseRow.formscommon_FieldsList","marker":""}],"path":"?.array","prefix":"","suffix":"","custom":"","useCustom":false}}
  ↓forms_config [ngx.components.UIControlVariable-1729516246665]: 
    comment: configure=lib_BaseRow/DisplayObjects/mobile/BrowseTables
    varValue: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
        - MobileSmartSourceType: script:params.forms_config
↓forms_config [ngx.components.UIStackVariable-1727686198206]: 
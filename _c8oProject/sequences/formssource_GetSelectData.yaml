comment: |
  Get data from a baserow table for a Select
  
↓ParseConfig [steps.SimpleStep-1666717197201]: 
  expression: |
    'jConfig = JSON.parse(forms_config);
    table_id = jConfig.table_id;
    view_id = jConfig.view_id ? jConfig.view_id : null;
    
    if (jConfig.columns) {
    	include_fields ="";
    	jConfig.columns.forEach(col => include_fields += col +",")
    	include_fields = include_fields.substring(0, include_fields.lastIndexOf('',''));
    }
    
    if (forms_filter) { 
    	filterExpression = JSON.stringify({
    		"mode": "OR",
    		"filters": [
    			{
    				"field": jConfig.columns[0],
    				"op": "contains",
    				"value": forms_filter
    			},
    			{
    				"field": jConfig.columns[1],
    				"op": "contains",
    				"value": forms_filter
    			}
    		]
    	});
    }
    
    '
↓Input_variables [steps.InputVariablesStep-1666100090915]: 
↓Call_Sequence1 [steps.SequenceStep-1666717386561]: 
  sourceSequence: lib_BaseRow.TableGetData
  ↓exclude [variables.StepVariable-1666717386564]: 
    comment: 'All the fields are included in the response by default. You can select a subset of fields by providing the exclude query parameter. If you for example provide the following GET parameter `exclude=field_1,field_2` then the fields with id `1` and id `2` are going to be excluded from the selection and response. If the `user_field_names` parameter is provided then instead exclude should be a comma separated list of the actual field names. For field names with commas you should surround the name with quotes like so: `exclude=My Field,"Field With , "`. A backslash can be used to escape field names which contain double quotes like so: `exclude=My Field,Field with \"`.'
    description: exclude
  ↓include_fields [variables.StepVariable-1666717386567]: 
    comment: 'All the fields are included in the response by default. You can select a subset of fields by providing the include query parameter. If you for example provide the following GET parameter `include=field_1,field_2` then only the fields withid `1` and id `2` are going to be selected and included in the response. If the `user_field_names` parameter is provided then instead include should be a comma separated list of the actual field names. For field names with commas you should surround the name with quotes like so: `include=My Field,"Field With , "`. A backslash can be used to escape field names which contain double quotes like so: `include=My Field,Field with \"`.'
    description: include
  ↓order_by [variables.StepVariable-1666717386570]: 
    comment: 'Optionally the rows can be ordered by provided field ids separated by comma. By default a field is ordered in ascending (A-Z) order, but by prepending the field with a ''-'' it can be ordered descending (Z-A). If the `user_field_names` parameter is provided then instead order_by should be a comma separated list of the actual field names. For field names with commas you should surround the name with quotes like so: `order_by=My Field,"Field With , "`. A backslash can be used to escape field names which contain double quotes like so: `order_by=My Field,Field with \"`.'
    description: order_by
  ↓page [variables.StepVariable-1666717386573]: 
    comment: Defines which page of rows should be returned.
    description: page
  ↓search [variables.StepVariable-1666717386576]: 
    comment: If provided only rows with data that matches the search query are going to be returned.
    description: search
  ↓size [variables.StepVariable-1666717386579]: 
    comment: Defines how many rows should be returned per page.
    description: size
  ↓table_id [variables.StepVariable-1666717386582]: 
    comment: Returns the rows of the table related to the provided value.
    description: table_id
    required: true
  ↓view_id [variables.StepVariable-1666717386585]: 
    comment: Includes all the filters and sorts of the provided view.
    description: view_id
  ↓filterExpression [variables.StepVariable-1666717386588]: 
↓IfExist [steps.IfExistStep-1666100090951]: 
  sourceDefinition: 
    - xmlizable: 
      - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
      - com.twinsoft.convertigo.beans.common.XMLVector: 
        - java.lang.String: 
          - ↑value: 1666717386561
        - java.lang.String: 
          - ↑value: ./document/error
  ↓Error_structure [steps.XMLErrorStep-1666100090954]: 
  ↓Return [steps.ReturnStep-1666100090957]: 
↓Array [steps.JsonArrayStep-1666100090960]: 
  key: 
    - xmlizable: 
      - ↑classname: com.twinsoft.convertigo.beans.steps.SmartType
      - SmartType: 
        - ↑mode: PLAIN
        - →→: value
  ↓Iterator [steps.IteratorStep-1666100090963]: 
    sourceDefinition: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
        - com.twinsoft.convertigo.beans.common.XMLVector: 
          - java.lang.String: 
            - ↑value: 1666717386561
          - java.lang.String: 
            - ↑value: ./document/results/object
    ↓Object [steps.JsonObjectStep-1666100090966]: 
      comment: The data object
      key: 
        - xmlizable: 
          - ↑classname: com.twinsoft.convertigo.beans.steps.SmartType
          - SmartType: 
            - ↑mode: PLAIN
            - →→: item
      ↓Field [steps.JsonFieldStep-1666100497109]: 
        key: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.steps.SmartType
            - SmartType: 
              - ↑mode: PLAIN
              - →→: displayValue
        value: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.steps.SmartType
            - SmartType: 
              - ↑mode: SOURCE
              - com.twinsoft.convertigo.beans.common.XMLVector: 
                - java.lang.String: 
                  - ↑value: 1666100090963
                - java.lang.String: 
                  - ↑value: ./*[3]
      ↓Field1 [steps.JsonFieldStep-1666100514159]: 
        key: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.steps.SmartType
            - SmartType: 
              - ↑mode: PLAIN
              - →→: value
        value: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.steps.SmartType
            - SmartType: 
              - ↑mode: SOURCE
              - com.twinsoft.convertigo.beans.common.XMLVector: 
                - java.lang.String: 
                  - ↑value: 1666100090963
                - java.lang.String: 
                  - ↑value: ./*[4]
↓forms_config [variables.RequestableVariable-1666100091062]: 
  comment: |
    '{
    	"en": {
    		"comment":"Fills the select component from data with a given configuration. The first column will be the displayed item in the select, the second column will be the value of this item",
    		"displayName":"Configuration"
    	}
    }
    
    '
  description: configure=lib_BaseRow/DisplayObjects/mobile/BrowseTables
  required: true
  value: 
↓forms_filter [variables.RequestableVariable-1666100091071]: 
  comment: |
    Filters
    
  description: 
  required: true
  value: 
↓TestWithFilter [core.TestCase]: 
  ↓forms_config [variables.TestCaseVariable-1666717673009]: 
    comment: The Table ID you want to get data from
    description: configure=lib_BaseRow/DisplayObjects/mobile/selecttable
    required: true
    value: |
      '{
      	"table_id": "109863",
      	"columns": ["Name", "Phone number"]
      }
      '
  ↓forms_filter [variables.TestCaseVariable-1666717686496]: 
    description: 
    required: true
    value: Alman
↓TestWithNoFilter [core.TestCase]: 
  ↓forms_config [variables.TestCaseVariable-1666166961536]: 
    comment: The Table ID you want to get data from
    description: configure=lib_BaseRow/DisplayObjects/mobile/selecttable
    required: true
    value: |
      '{
      	"table_id": "109863",
      	"columns": ["Name", "Phone number"]
      }
      '
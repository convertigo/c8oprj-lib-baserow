accessibility: Hidden
authenticatedContextRequired: true
comment: |
  '{
      "en": {
          "displayName": "GetSelectData",
          "comment": "Get data from a Baserow table as options for a Select component. You will be able to choose the Baserow columns for the names to be displayed in the select dropdown list and the column for the values of each name."
      },
      "fr": {
          "displayName": "GetSelectData",
          "comment": "Obtenez des données d''une table Baserow comme options pour un composant Sélecteur. Vous pourrez choisir les colonnes Baserow pour les noms à afficher dans la liste déroulante de sélection et la colonne pour les valeurs de chaque nom."
      },
      "it": {
          "displayName": "GetSelectData",
          "comment": "Ottieni dati da una tabella Baserow come opzioni per un componente di Selezione. Sarai in grado di scegliere le colonne Baserow per i nomi da visualizzare nella lista a discesa di selezione e la colonna per i valori di ciascun nome."
      },
      "es": {
          "displayName": "GetSelectData",
          "comment": "Obtén datos de una tabla Baserow como opciones para un componente Select. Podrás elegir las columnas de Baserow para los nombres que se mostrarán en la lista desplegable de selección y la columna para los valores de cada nombre."
      },
      "types": ["select"]
  }
  '
↓ParseConfig [steps.SimpleStep-1666717197201]: 
  expression: |
    'jConfig = JSON.parse(forms_config);
    table_id = jConfig.table_id;
    view_id = jConfig.view_id ? jConfig.view_id : null;
    
    if (jConfig.columns) {
    	include_fields ="";
    	jConfig.columns.forEach(col => include_fields += col +",")
    	include_fields = include_fields.substring(0, include_fields.lastIndexOf('',''));
    }
    let displayValue = jConfig.displayValue;
    let value = jConfig.value;
    
    filterExpression = forms_Filter;					// This is the Constructed Fiter API for baserow.
    
    log.warn("form_filter is :" + forms_filter.length)
    
    if (forms_filter.length > 3)  					// This is the full text search API filed for baserow
    	search= forms_filter 
    
    let describeStructure = false;
    
    if (model == "true") {
    	size = "1";
    	filterExpression = null;
    	describeStructure = true;
    }
    let verbsByType = {
    	text: [
            "equal",
            "not_equal",
            "contains",
            "contains_not",
            "length_is_lower_than",
            "empty",
            "not_empty"
        ],
        long_text: [
            "equal",
            "not_equal",
            "contains",
            "contains_not",
            "length_is_lower_than",
            "empty",
            "not_empty"
        ],
        link_row: [
            "link_row_has",
            "link_row_has_not",
            "link_row_contains",
            "link_row_not_contains",
            "empty",
            "not_empty"
        ],
        number: [
            "equal",
            "not_equal",
            "contains",
            "contains_not",
            "higher_than",
            "lower_than",
            "empty",
            "not_empty",
        ],
        rating : [
            "equal",
            "not_equal",
            "higher_than",
            "lower_than",
        ],
        boolean:[
            "boolean",
            "empty",
            "not_empty",
        ],
        date:[
            "date_equal",
            "date_equal",
            "date_not_equal",
            "date_equals_today",
            "date_before_today",
            "date_after_today",
            "date_equals_days_ago",
            "date_equals_months_ago",
            "date_equals_years_ago",
            "date_equals_week",
            "date_equals_month",
            "date_equals_month",
            "date_equals_year",
            "date_equals_day_of_month",
            "date_before",
            "date_after",
            "contains",
            "contains_not",
            "empty",
            "not_empty"
        ],
        last_modified:[
            "date_equal",
            "date_equal",
            "date_not_equal",
            "date_equals_today",
            "date_before_today",
            "date_after_today",
            "date_equals_days_ago",
            "date_equals_months_ago",
            "date_equals_years_ago",
            "date_equals_week",
            "date_equals_month",
            "date_equals_month",
            "date_equals_year",
            "date_equals_day_of_month",
            "date_before",
            "date_after",
            "contains",
            "contains_not",
            "empty",
            "not_empty"
        ],
        created_on:[
            "date_equal",
            "date_equal",
            "date_not_equal",
            "date_equals_today",
            "date_before_today",
            "date_after_today",
            "date_equals_days_ago",
            "date_equals_months_ago",
            "date_equals_years_ago",
            "date_equals_week",
            "date_equals_month",
            "date_equals_month",
            "date_equals_year",
            "date_equals_day_of_month",
            "date_before",
            "date_after",
            "contains",
            "contains_not",
            "empty",
            "not_empty"
        ],
        url:[
            "equal",
            "not_equal",
            "contains",
            "contains_not",
            "length_is_lower_than",
            "empty",
            "not_empty"
        ],
        email:[
            "equal",
            "not_equal",
            "contains",
            "contains_not",
            "length_is_lower_than",
            "empty",
            "not_empty"
        ],
        file:[
            "filename_contains",
            "has_file_type",
            "empty",
            "not_empty"
        ],
        single_select:[
            "single_select_equal",
            "single_select_not_equal",
            "contains",
            "contains_not",
            "empty",
            "not_empty"
        ],
        multiple_select:[
            "multiple_select_has",
            "multiple_select_has_not",
            "contains",
            "contains_not",
            "empty",
            "not_empty"
        ],
        phone_number: [
            "equal",
            "not_equal",
            "contains",
            "contains_not",
            "length_is_lower_than",
            "empty",
            "not_empty"
        ]
    }
    
    
    '
↓Input_variables [steps.InputVariablesStep-1666100090915]: 
↓Call_Sequence1 [steps.SequenceStep-1666717386561]: 
  sourceSequence: lib_BaseRow.TableGetData
  ↓exclude [variables.StepVariable-1666717386564]: 
    comment: 'All the fields are included in the response by default. You can select a subset of fields by providing the exclude query parameter. If you for example provide the following GET parameter `exclude=field_1,field_2` then the fields with id `1` and id `2` are going to be excluded from the selection and response. If the `user_field_names` parameter is provided then instead exclude should be a comma separated list of the actual field names. For field names with commas you should surround the name with quotes like so: `exclude=My Field,"Field With , "`. A backslash can be used to escape field names which contain double quotes like so: `exclude=My Field,Field with \"`.'
    description: exclude
  ↓include_fields [variables.StepVariable-1666717386567]: 
    comment: 'All the fields are included in the response by default. You can select a subset of fields by providing the include query parameter. If you for example provide the following GET parameter `include=field_1,field_2` then only the fields withid `1` and id `2` are going to be selected and included in the response. If the `user_field_names` parameter is provided then instead include should be a comma separated list of the actual field names. For field names with commas you should surround the name with quotes like so: `include=My Field,"Field With , "`. A backslash can be used to escape field names which contain double quotes like so: `include=My Field,Field with \"`.'
    description: include
  ↓order_by [variables.StepVariable-1666717386570]: 
    comment: 'Optionally the rows can be ordered by provided field ids separated by comma. By default a field is ordered in ascending (A-Z) order, but by prepending the field with a ''-'' it can be ordered descending (Z-A). If the `user_field_names` parameter is provided then instead order_by should be a comma separated list of the actual field names. For field names with commas you should surround the name with quotes like so: `order_by=My Field,"Field With , "`. A backslash can be used to escape field names which contain double quotes like so: `order_by=My Field,Field with \"`.'
    description: order_by
  ↓page [variables.StepVariable-1666717386573]: 
    comment: Defines which page of rows should be returned.
    description: page
  ↓search [variables.StepVariable-1666717386576]: 
    comment: If provided only rows with data that matches the search query are going to be returned.
    description: search
  ↓size [variables.StepVariable-1666717386579]: 
    comment: Defines how many rows should be returned per page.
    description: size
  ↓table_id [variables.StepVariable-1666717386582]: 
    comment: Returns the rows of the table related to the provided value.
    description: table_id
    required: true
  ↓view_id [variables.StepVariable-1666717386585]: 
    comment: Includes all the filters and sorts of the provided view.
    description: view_id
  ↓filterExpression [variables.StepVariable-1666717386588]: 
  ↓describeStructure [variables.StepVariable-1680699118688]: 
↓IfExist [steps.IfExistStep-1666100090951]: 
  sourceDefinition: 
    - xmlizable: 
      - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
      - com.twinsoft.convertigo.beans.common.XMLVector: 
        - java.lang.String: 
          - ↑value: 1666717386561
        - java.lang.String: 
          - ↑value: ./document/error
  ↓Error_structure [steps.XMLErrorStep-1666100090954]: 
  ↓Return [steps.ReturnStep-1666100090957]: 
↓myVariable1 [steps.JsonSourceStep-1680712167643]: 
  sourceDefinition: 
    - xmlizable: 
      - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
      - com.twinsoft.convertigo.beans.common.XMLVector: 
        - java.lang.String: 
          - ↑value: 1666717386561
        - java.lang.String: 
          - ↑value: ./document/results/object
  variableName: res
↓myVariable [steps.JsonSourceStep-1680699208395]: 
  sourceDefinition: 
    - xmlizable: 
      - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
      - com.twinsoft.convertigo.beans.common.XMLVector: 
        - java.lang.String: 
          - ↑value: 1666717386561
        - java.lang.String: 
          - ↑value: ./document/structure/object
  variableName: structure
↓computeValue [steps.SimpleStep-1680712348539]: 
  expression: |
    'if(!(Array.isArray(res))){
    	res =  [res];
    }
    res = res.map((x)=>{
    	return {
    		displayValue: x[displayValue],
    		value : x[value]
    	} 
    })
    
    // Now fiter is done on the backend using the search API, so no use for the next lines...
    /*
    if(forms_filter != undefined && forms_filter != ""){
    	res = res.filter((z)=>{
    		return z.displayValue.toLowerCase().indexOf(forms_filter.toLowerCase()) != -1;
    	})
    }
    */'
↓object [steps.JsonToXmlStep-1680712764673]: 
  jsonObject: 
    - xmlizable: 
      - ↑classname: com.twinsoft.convertigo.beans.steps.SmartType
      - SmartType: 
        - ↑mode: JS
        - →→: res
  key: 
    - xmlizable: 
      - ↑classname: com.twinsoft.convertigo.beans.steps.SmartType
      - SmartType: 
        - ↑mode: PLAIN
        - →→: value
↓jIf [steps.IfStep-1680699398785]: 
  condition: model == "true" && "structure" in this
  ↓Sequence_JS [steps.SimpleStep-1680699255296]: 
    expression: |
      'let data = [{}];
      structure.forEach((e)=>{
      	if(jConfig.columns.indexOf(e.name) != -1){
      		e.filterHide = false;
      		e.filterCompletion = verbsByType[e.type];
      		if(e.filterCompletion == null){
      			e.filterCompletion = [];
      		}
      		data[0][e.name] = e;
      	}
      	
      })'
  ↓data [steps.JsonToXmlStep-1680699661741]: 
    jsonObject: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.steps.SmartType
        - SmartType: 
          - ↑mode: JS
          - →→: data
    key: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.steps.SmartType
        - SmartType: 
          - ↑mode: PLAIN
          - →→: data
↓forms_config [variables.RequestableVariable-1666100091062]: 
  comment: |
    '{
    	"en": {
    		"comment":"Fills the select component from data with a given configuration. The first column will be the displayed item in the select, the second column will be the value of this item",
    		"displayName":"Configuration"
    	}
    }
    
    '
  description: configure=lib_BaseRow/DisplayObjects/mobile/BrowseTables/select
  required: true
  value: 
↓forms_filter [variables.RequestableVariable-1666100091071]: 
  comment: |
    Filters
    
  description: 
  required: true
  value: 
↓forms_Filter [variables.RequestableVariable-1680171408883]: 
  comment: |
    A custom filter following  JSON styntax
    
  description: filter
  required: true
  value: 
↓model [variables.RequestableVariable-1680688774991]: 
  comment: If true, just return one line of data so that No Code studio can compte the table model
↓TestWithFilter [core.TestCase]: 
  ↓forms_config [variables.TestCaseVariable-1666717673009]: 
    comment: The Table ID you want to get data from
    description: configure=lib_BaseRow/DisplayObjects/mobile/selecttable
    required: true
    value: |
      '{
      	"table_id": "77",
      	"columns": ["Number"]
      }
      '
  ↓forms_tableFilter [variables.TestCaseVariable-1666717686496]: 
    description: 
    required: true
    value: 100
↓TestWithLinkedFileds [core.TestCase]: 
  ↓forms_config [variables.TestCaseVariable-1680180805970]: 
    comment: The Table ID you want to get data from
    description: configure=lib_BaseRow/DisplayObjects/mobile/selecttable
    required: true
    value: |
      '{
      	"table_id": "661",
      	"columns": ["Code", "Customer name"]
      }
      '
↓TestWithLinkedFiledsAndOneCol [core.TestCase]: 
  ↓forms_config [variables.TestCaseVariable-1680187153247]: 
    comment: The Table ID you want to get data from
    description: configure=lib_BaseRow/DisplayObjects/mobile/selecttable
    required: true
    value: |
      '{
      	"table_id": "661",
      	"columns": ["Customer name"]
      }
      '
↓TestWithNoFilter [core.TestCase]: 
  ↓forms_config [variables.TestCaseVariable-1680173707703]: 
    comment: The Table ID you want to get data from
    description: configure=lib_BaseRow/DisplayObjects/mobile/selecttable
    required: true
    value: |
      '{
      	"table_id": "660",
      	"columns": ["Number"]
      }
      '
↓TestWithNoFilterWith2Cols [core.TestCase]: 
  ↓forms_config [variables.TestCaseVariable-1680173777993]: 
    comment: The Table ID you want to get data from
    description: configure=lib_BaseRow/DisplayObjects/mobile/selecttable
    required: true
    value: |
      '{
      	"table_id": "660",
      	"columns": ["Number", "Accommodates"]
      }
      '
↓TestWithNoFilterWithCustomFilter [core.TestCase]: 
  ↓forms_config [variables.TestCaseVariable-1680174266714]: 
    comment: The Table ID you want to get data from
    description: configure=lib_BaseRow/DisplayObjects/mobile/selecttable
    required: true
    value: |
      '{
      	"table_id": "660",
      	"columns": ["Number", "Accommodates"]
      }
      '
  ↓forms_tableFilter [variables.TestCaseVariable-1680174292982]: 
    description: 
    required: true
    value: 
  ↓forms_Filter [variables.TestCaseVariable-1680174292984]: 
    description: 
    required: true
    value: |
      '{
      	"mode": "AND",  
      	"filters": [
      		{
      			"field": "Number",  
      			"op": "contains",	
      			"value": "100"	
      		}
      	]
      }
      '
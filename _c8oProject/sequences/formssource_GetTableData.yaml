accessibility: Hidden
comment: |
  '{
      "en": {
          "displayName": "Get data",
          "comment": "Get data from a Baserow table for a data grid. Each column of the Baserow table will be displayed as the same column in the data grid"
      },
      "fr": {
          "displayName": "Récupérer les données",
          "comment": "Récupérez les données d''une table Baserow pour une grille de données. Chaque colonne de la table Baserow sera affichée comme la même colonne dans la grille de données"
      },
      "es": {
          "displayName": "Obtener datos",
          "comment": "Obtenga datos de una tabla de Baserow para una cuadrícula de datos. Cada columna de la tabla de Baserow se mostrará como la misma columna en la cuadrícula de datos"
      },
      "it": {
          "displayName": "Ottenere dati",
          "comment": "Ottieni dati da una tabella di Baserow per una griglia di dati. Ogni colonna della tabella di Baserow verrà visualizzata come la stessa colonna nella griglia di dati"
      },
      "types": ["grid", "chart", "map"]
  }'
↓Call_Sequence1 [steps.SequenceStep-1734686735705]: 
  sourceSequence: lib_BaseRow.formscommon_CheckConfig
  ↓forms_config [variables.StepVariable-1734686735708]: 
    description: configure=lib_BaseRow/DisplayObjects/mobile/BrowseTables
    required: true
↓IfError [steps.IfExistStep-1734686735711]: 
  condition: IfError
  sourceDefinition: 
    - xmlizable: 
      - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
      - com.twinsoft.convertigo.beans.common.XMLVector: 
        - java.lang.String: 
          - ↑value: 1734686735705
        - java.lang.String: 
          - ↑value: ./document/error
  ↓Copy [steps.XMLCopyStep-1734686735714]: 
    sourceDefinition: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
        - com.twinsoft.convertigo.beans.common.XMLVector: 
          - java.lang.String: 
            - ↑value: 1734686735705
          - java.lang.String: 
            - ↑value: ./document/error
  ↓Return [steps.ReturnStep-1734686735717]: 
↓ParseConfig [steps.SimpleStep-1734686735720]: 
  expression: |
    'jConfig = JSON.parse(forms_config);
    table_id = jConfig.table_id;
    view_id = jConfig.view_id ? jConfig.view_id : null;
    let describeStructure = false;
    let verbsByType = {
    	text: [
            "equal",
            "not_equal",
            "contains",
            "contains_not",
    		"contains_word",
    		"doesnt_contain_word",
            "length_is_lower_than",
            "empty",
            "not_empty"
        ],
        long_text: [
    		"equal",
            "not_equal",
            "contains",
            "contains_not",
    		"contains_word",
    		"doesnt_contain_word",
            "length_is_lower_than",
            "empty",
            "not_empty"
        ],
        link_row: [
            "link_row_has",
            "link_row_has_not",
            "link_row_contains",
            "link_row_not_contains",
            "empty",
            "not_empty"
        ],
        number: [
            "equal",
            "not_equal",
            "contains",
            "contains_not",
            "higher_than",
    		"higher_than_or_equal",
    		"lower_than",
    		"lower_than_or_equal",
    		"is_even_and_whole",
            "empty",
            "not_empty",
        ],
        rating : [
            "equal",
            "not_equal",
            "higher_than",
            "lower_than",
        ],
        boolean:[
            "boolean",
            "empty",
            "not_empty",
        ],
        date:[
            "date_equal",
            "date_equal",
            "date_not_equal",
            "date_equals_today",
            "date_before_today",
            "date_after_today",
            "date_equals_days_ago",
            "date_equals_months_ago",
            "date_equals_years_ago",
            "date_equals_week",
            "date_equals_month",
            "date_equals_month",
            "date_equals_year",
            "date_equals_day_of_month",
            "date_before",
            "date_after",
            "contains",
            "contains_not",
            "empty",
            "not_empty"
        ],
        last_modified:[
            "date_equal",
            "date_equal",
            "date_not_equal",
            "date_equals_today",
            "date_before_today",
            "date_after_today",
            "date_equals_days_ago",
            "date_equals_months_ago",
            "date_equals_years_ago",
            "date_equals_week",
            "date_equals_month",
            "date_equals_month",
            "date_equals_year",
            "date_equals_day_of_month",
            "date_before",
            "date_after",
            "contains",
            "contains_not",
            "empty",
            "not_empty"
        ],
        created_on:[
            "date_equal",
            "date_equal",
            "date_not_equal",
            "date_equals_today",
            "date_before_today",
            "date_after_today",
            "date_equals_days_ago",
            "date_equals_months_ago",
            "date_equals_years_ago",
            "date_equals_week",
            "date_equals_month",
            "date_equals_month",
            "date_equals_year",
            "date_equals_day_of_month",
            "date_before",
            "date_after",
            "contains",
            "contains_not",
            "empty",
            "not_empty"
        ],
        url:[
            "equal",
            "not_equal",
            "contains",
            "contains_not",
            "length_is_lower_than",
            "empty",
            "not_empty"
        ],
        email:[
            "equal",
            "not_equal",
            "contains",
            "contains_not",
            "length_is_lower_than",
            "empty",
            "not_empty"
        ],
        file:[
            "filename_contains",
            "has_file_type",
            "empty",
            "not_empty"
        ],
        single_select:[
            "single_select_equal",
            "single_select_not_equal",
            "contains",
            "contains_not",
            "empty",
            "not_empty"
        ],
        multiple_select:[
            "multiple_select_has",
            "multiple_select_has_not",
            "contains",
            "contains_not",
            "empty",
            "not_empty"
        ],
        phone_number: [
            "equal",
            "not_equal",
            "contains",
            "contains_not",
            "length_is_lower_than",
            "empty",
            "not_empty"
        ]
    }
    
    // For each column provider in the configuration, compute the lits of fields we wloud like to retriev
    // With the BaseRow API.
    if (jConfig.columns) {
    	include_fields ="";
    	jConfig.columns.forEach(col => include_fields += col +",")
    	include_fields = include_fields.substring(0, include_fields.lastIndexOf('',''));
    }
    
    // The Filter Expression is provided  directly in the form_fitler variable.
    filterExpression = forms_tableFilter;
    
    // If Forms asks us for a model, just return the 5 First lines, ignoring all filters
    if (model == "true") {
    	size = "1";
    	filterExpression = null;
    	describeStructure = true;
    }
    '
↓Input_variables [steps.InputVariablesStep-1734686735723]: 
↓Call_Sequence [steps.SequenceStep-1734686735726]: 
  sourceSequence: lib_BaseRow.TableGetData
  ↓exclude [variables.StepVariable-1734686735729]: 
    comment: 'All the fields are included in the response by default. You can select a subset of fields by providing the exclude query parameter. If you for example provide the following GET parameter `exclude=field_1,field_2` then the fields with id `1` and id `2` are going to be excluded from the selection and response. If the `user_field_names` parameter is provided then instead exclude should be a comma separated list of the actual field names. For field names with commas you should surround the name with quotes like so: `exclude=My Field,"Field With , "`. A backslash can be used to escape field names which contain double quotes like so: `exclude=My Field,Field with \"`.'
    description: exclude
  ↓include_fields [variables.StepVariable-1734686735732]: 
    comment: 'All the fields are included in the response by default. You can select a subset of fields by providing the include query parameter. If you for example provide the following GET parameter `include=field_1,field_2` then only the fields withid `1` and id `2` are going to be selected and included in the response. If the `user_field_names` parameter is provided then instead include should be a comma separated list of the actual field names. For field names with commas you should surround the name with quotes like so: `include=My Field,"Field With , "`. A backslash can be used to escape field names which contain double quotes like so: `include=My Field,Field with \"`.'
    description: include
  ↓order_by [variables.StepVariable-1734686735735]: 
    comment: 'Optionally the rows can be ordered by provided field ids separated by comma. By default a field is ordered in ascending (A-Z) order, but by prepending the field with a ''-'' it can be ordered descending (Z-A). If the `user_field_names` parameter is provided then instead order_by should be a comma separated list of the actual field names. For field names with commas you should surround the name with quotes like so: `order_by=My Field,"Field With , "`. A backslash can be used to escape field names which contain double quotes like so: `order_by=My Field,Field with \"`.'
    description: order_by
  ↓page [variables.StepVariable-1734686735738]: 
    comment: Defines which page of rows should be returned.
    description: page
  ↓search [variables.StepVariable-1734686735741]: 
    comment: If provided only rows with data that matches the search query are going to be returned.
    description: search
  ↓size [variables.StepVariable-1734686735744]: 
    comment: Defines how many rows should be returned per page.
    description: size
  ↓table_id [variables.StepVariable-1734686735747]: 
    comment: Returns the rows of the table related to the provided value.
    description: table_id
    required: true
  ↓view_id [variables.StepVariable-1734686735750]: 
    comment: Includes all the filters and sorts of the provided view.
    description: view_id
  ↓filterExpression [variables.StepVariable-1734686735753]: 
  ↓describeStructure [variables.StepVariable-1734686735756]: 
↓IfExist [steps.IfExistStep-1734686735759]: 
  sourceDefinition: 
    - xmlizable: 
      - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
      - com.twinsoft.convertigo.beans.common.XMLVector: 
        - java.lang.String: 
          - ↑value: 1734686735726
        - java.lang.String: 
          - ↑value: ./document/error
  ↓Error_structure [steps.XMLErrorStep-1734686735762]: 
    message: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.steps.SmartType
        - SmartType: 
          - ↑mode: SOURCE
          - com.twinsoft.convertigo.beans.common.XMLVector: 
            - java.lang.String: 
              - ↑value: 1734686735726
            - java.lang.String: 
              - ↑value: ./document/error/message/text()
  ↓Return [steps.ReturnStep-1734686735765]: 
↓myVariable [steps.JsonSourceStep-1734686735768]: 
  sourceDefinition: 
    - xmlizable: 
      - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
      - com.twinsoft.convertigo.beans.common.XMLVector: 
        - java.lang.String: 
          - ↑value: 1734686735726
        - java.lang.String: 
          - ↑value: ./document/structure/object
  variableName: structure
↓myVariable1 [steps.JsonSourceStep-1734686735771]: 
  sourceDefinition: 
    - xmlizable: 
      - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
      - com.twinsoft.convertigo.beans.common.XMLVector: 
        - java.lang.String: 
          - ↑value: 1734686735726
        - java.lang.String: 
          - ↑value: ./document/results
  variableName: results
↓ComputeData [steps.SimpleStep-1734686735777]: 
  expression: |
    'include("js/utils.js");
    var data = [];
    for(var elem of results){
    	var obj = {};
    	var cpt = 0;
    	for(var key in elem){
    		var html = "" + base_html;
    		var current = elem[key];
    		if(current != null){
    			obj[key] = {"displayName": key, "type": "html", value:""};
    			var result = computeAnyType(current, false);
    			html += result.innerHtml;
    			obj[key].value = result.value;
    			if(key == "id" || key == "order" || (jConfig.hidden ? jConfig.hidden.includes(key) : false)){
    				obj[key].hidden = true;
    			}
    			obj[key].displayValue = html;
    		}
    		else{
    			obj[key] = {"displayName": key, "type": "html", value:null};
    		}
    		if(model == "true" && "structure" in this){
    			var cTargetCompletion = [];
    			var cHideFromFiltering = true;
    			if(jConfig.columns.indexOf(key) != -1){
    				var cTarget = structure.filter((x)=>{
    					return x.name == key
    				})[0];
    				// if target is formula use it''s formula_type
    				var cType = cTarget != undefined ? cTarget.type : null;
    				if(cType == "formula"){
    					cType = cTarget.formula_type;
    				}
    				if(cType == "lookup"){
    					cType = cTarget.formula_type;
    				}
    				obj[key]["cType"] = cType;
    				cTargetCompletion = verbsByType[cType];
    				cHideFromFiltering = false;
    				if(cTargetCompletion == undefined){
    					cTargetCompletion = [];
    					cHideFromFiltering = true;
    				}
    			}
    			obj[key]["filterCompletion"] = cTargetCompletion;
    			obj[key]["filterHide"] = cHideFromFiltering;
    
    		}
    	}
    	jReorderedRow = {};
    	jReorderedRow["id"] = obj["id"];
    	jReorderedRow["order"] = obj["order"];
    	jConfig.columns.forEach((col) => {
    	  if (obj.hasOwnProperty(col)) {
    	    jReorderedRow[col] = obj[col];
    	  }
    	});
    	data.push(jReorderedRow);
    }
    '
↓object [steps.JsonToXmlStep-1734686735780]: 
  jsonObject: 
    - xmlizable: 
      - ↑classname: com.twinsoft.convertigo.beans.steps.SmartType
      - SmartType: 
        - ↑mode: JS
        - →→: data
  key: 
    - xmlizable: 
      - ↑classname: com.twinsoft.convertigo.beans.steps.SmartType
      - SmartType: 
        - ↑mode: PLAIN
        - →→: data
↓forms_config [variables.RequestableVariable-1734686735912]: 
  comment: |
    '{
    	"en": {
            "comment": "Choose a table in Baserow",
            "displayName": "Configuration"
        },
        "fr": {
            "comment": "Choisissez une table dans Baserow",
    		"displayName":"Configuration"
        },
        "es": {
            "comment": "Elija una tabla en Baserow",
            "displayName": "Configuración"
        },
        "it": {
            "comment": "Scegli una tabella in Baserow",
            "displayName": "Configurazione"
    	}
    }'
  description: configure=lib_BaseRow/DisplayObjects/mobile/BrowseTables/table
  required: true
  value: 
↓forms_tableFilter [variables.RequestableVariable-1734686735915]: 
  comment: |
    '{
        "en": {
            "comment": "Define a filter to apply to Baserow table",
            "displayName": "Filter"
        },
        "fr": {
            "comment": "Définir un filtre à appliquer à la table Baserow",
            "displayName": "Filtre"
        },
        "es": {
            "comment": "Definir un filtro para aplicar a la tabla de Baserow",
            "displayName": "Filtro"
        },
        "it": {
            "comment": "Definire un filtro da applicare alla tabella di Baserow",
            "displayName": "Filtro"
        }
    }'
  description: filter
↓model [variables.RequestableVariable-1734686735918]: 
  comment: If true, just return one line of data so that No Code studio can compte the table model
↓TestWithFilters [core.TestCase]: 
  ↓forms_config [variables.TestCaseVariable-1734686735922]: 
    description: configure=lib_BaseRow/DisplayObjects/mobile/BrowseTables
    required: true
    value: |
      '{
      	"table_id": "384"
      }
      '
  ↓forms_tableFilter [variables.TestCaseVariable-1734686735925]: 
    description: 
    required: true
    value: |
      '{
      	"mode": "AND",
      	"filters": [
      		{
      			"field": "Nom",
      			"op": "contains",
      			"value": "Ada"
      		}
      	]
      }
      '
↓TestWithFilters1 [core.TestCase]: 
  ↓forms_config [variables.TestCaseVariable-1734686735929]: 
    description: configure=lib_BaseRow/DisplayObjects/mobile/BrowseTables
    required: true
    value: '{"table_id":"110211", "columns":["Last name", "First name", "Photo", "Department"]}'
  ↓forms_tableFilter [variables.TestCaseVariable-1734686735932]: 
    description: 
    required: true
    value: '{ "mode": "AND", "filters": [ { "field": "Last name", "op": "contains", "value":"" }, { "field": "Department", "op": "contains", "value":"" }]}'
↓TestWithFilters2 [core.TestCase]: 
  ↓forms_config [variables.TestCaseVariable-1734686735936]: 
    description: configure=lib_BaseRow/DisplayObjects/mobile/BrowseTables
    required: true
    value: |
      '{
      	"table_id": "118056"
      }
      '
  ↓forms_tableFilter [variables.TestCaseVariable-1734686735939]: 
    description: 
    required: true
    value: |
      '{"mode":"AND","filters":[{"field":"name","op":"equal","value":"Fulton Airport"}]}
      
      '
↓TestWithFiltersAndModel [core.TestCase]: 
  ↓forms_config [variables.TestCaseVariable-1734686735943]: 
    description: configure=lib_BaseRow/DisplayObjects/mobile/BrowseTables
    required: true
    value: |
      '{
      	"table_id": "715"
      }
      '
  ↓model [variables.TestCaseVariable-1734686735946]: 
    value: true
↓TestWithInlcude [core.TestCase]: 
  ↓forms_config [variables.TestCaseVariable-1734686735950]: 
    description: configure=lib_BaseRow/DisplayObjects/mobile/BrowseTables
    required: true
    value: |
      '{
      	"table_id": "109863",
      	"columns": ["Name", "Picture", "Position", "SingleSelect", "Phone number", "Email"],
      	"hidden": ["Name", "Picture", "Position", "SingleSelect", "Phone number", "Email"]
      }
      '
↓TestWithLinks [core.TestCase]: 
  ↓forms_config [variables.TestCaseVariable-1734686735954]: 
    description: configure=lib_BaseRow/DisplayObjects/mobile/BrowseTables
    required: true
    value: '{"table_id":"109861", "columns":["Last name", "First name", "Photo", "Department"]}'
↓TestWithModel [core.TestCase]: 
  ↓forms_config [variables.TestCaseVariable-1734686735958]: 
    description: configure=lib_BaseRow/DisplayObjects/mobile/BrowseTables
    required: true
    value: |
      '
      {"table_id":416,"columns":["No de Code à barre","Notes","Actif","Transporteur","No Récépissé","No de colis","Date/Heure Saisie","Utilisateur","Dépot","Activité"],"hidden":["Notes","Actif","Utilisateur","Dépot","Activité"]}'
  ↓forms_tableFilter [variables.TestCaseVariable-1734686735961]: 
    description: 
  ↓model [variables.TestCaseVariable-1734686735964]: 
    value: true
↓TestWithView [core.TestCase]: 
  ↓forms_config [variables.TestCaseVariable-1734686735968]: 
    description: configure=lib_BaseRow/DisplayObjects/mobile/BrowseTables
    required: true
    value: |
      '{
      	"table_id": "351",
      	"view_id": "1424"
      }
      '
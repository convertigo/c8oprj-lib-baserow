accessibility: Private
comment: Uploads a CSV to a table. 
responseTimeout: 60000000000000000
↓Input_variables [steps.InputVariablesStep-1669198830917]: 
↓Iterator [steps.IteratorStep-1669295413862]: 
  sourceDefinition: 
    - xmlizable: 
      - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
      - com.twinsoft.convertigo.beans.common.XMLVector: 
        - java.lang.String: 
          - ↑value: 1669198830917
        - java.lang.String: 
          - ↑value: ./files
  ↓jSimpleSource [steps.SimpleSourceStep-1669295533831]: 
    sourceDefinition: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
        - com.twinsoft.convertigo.beans.common.XMLVector: 
          - java.lang.String: 
            - ↑value: 1669295413862
          - java.lang.String: 
            - ↑value: ./text()
    variableName: file
  ↓CreateCSVReader [steps.SimpleStep-1669198830923]: 
    expression: |
      '// Java Imports
      var Paths = java.nio.file.Paths;
      var Files = java.nio.file.Files;
      var CSVReaderBuilder = com.opencsv.CSVReaderBuilder;
      var CSVParserBuilder = com.opencsv.CSVParserBuilder;
      var RFC4180ParserBuilder = com.opencsv.RFC4180ParserBuilder;
      // Log params
      log.debug("fileSeparator used will be: " + fileSeparator);
      log.debug("quoteChar used will be: " + quoteChar);
      
      // Declare global variables
      var br = null;
      var line = "";
      var path;
      try{
      	// Get file path
      	path = Paths.get(file);
      	// Create a buffer reader
      	br = Files.newBufferedReader(path);
      	// Instanciate CSVReaderBuilder, with RFC4180ParserBuilder (helping for special chars as \) 
      	var reader = new CSVReaderBuilder(br)
                      .withCSVParser(new RFC4180ParserBuilder()
                              .withQuoteChar(""+quoteChar)
                              .withSeparator(""+fileSeparator)
                              .build())
                      .build();
          // If firstLine are columns name ignore them
      	if(firstLineColumn == true || firstLineColumn == "true"){
      		cols = reader.readNext();
      		log.debug("Skipped first line since its column name");
      	}
      }
      catch(e){
      	log.warn("An error occured " + JSON.stringify(e))
      }
      
      // Declare body var
      var table = {items: []};
      var cpt = 0;
      if(cptTotal == undefined){
      	var cptTotal = 0;
      }
      var last = false;'
  ↓jWhile [steps.WhileStep-1669198830938]: 
    condition: try{(line = reader.readNext())}catch(e){log.warn("error reading" + JSON.stringify(e)); reader.skip(1); line = line = reader.readNext();} line != null || last != true
    ↓ComputeData [steps.SimpleStep-1669198830941]: 
      expression: |
        'if(line != null){
        	log.warn("Line : " + JSON.stringify(line))
        	let tblLine = {}
        	for (i=0; i < cols.length; i++) {
        		tblLine[cols[i]] = line[i]
        	}
        	log.warn("tbl : " + JSON.stringify(tblLine))
        	table.items.push(tblLine);
        	cpt++;
        }
        else{
        	last = true;
        }
        '
    ↓jIf [steps.IfStep-1669199578744]: 
      condition: cpt >= (+chunkSize) || last == true
      ↓stringifyBody [steps.SimpleStep-1669199369671]: 
        expression: |
          '// Copy and stringify body into a new var to be send to al subsequence
          var data = "" + JSON.stringify(table);
          log.warn("Stringifying this line " + data);
          cptTotal = cptTotal + (+(""+ cpt));
          log.debug("Actual total count is: " +cptTotal);
          // // Re init vars
          table ={items: []};
          cpt = 0;
          '
      ↓Call_Sequence [steps.SequenceStep-1708099107205]: 
        sourceSequence: lib_BaseRow.TableCreateRowsApiKey
        ↓data [variables.StepVariable-1708099107207]: 
          comment: 'A JSON object with each field name and value, such as: {"items" : [{"field1":"value1", "field2": "value2"}, {"field1":"value1B", "field2": "value2B"}]}'
          required: true
        ↓table_id [variables.StepVariable-1708099107209]: 
          comment: Insert row in this table_id
          description: table_id
          required: true
        ↓user_field_names [variables.StepVariable-1708099107213]: 
          comment: A flag query parameter which if provided this endpoint will expect and return the user specified field names instead of internal Baserow field names (field_123 etc).
          description: table_id
          required: true
          value: true
      ↓IfExist [steps.IfExistStep-1708104254051]: 
        sourceDefinition: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
            - com.twinsoft.convertigo.beans.common.XMLVector: 
              - java.lang.String: 
                - ↑value: 1708099107205
              - java.lang.String: 
                - ↑value: ./document/error
        ↓Error_structure [steps.XMLErrorStep-1708104579495]: 
          message: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.steps.SmartType
              - SmartType: 
                - ↑mode: SOURCE
                - com.twinsoft.convertigo.beans.common.XMLVector: 
                  - java.lang.String: 
                    - ↑value: 1708099107205
                  - java.lang.String: 
                    - ↑value: ./document/error/message/text()
        ↓Return [steps.ReturnStep-1708104609349]: 
↓jElement [steps.ElementStep-1669200146459]: 
  expression: cptTotal + " elements have been inserted"
  nodeName: result
↓files [variables.RequestableMultiValuedVariable-1669295387272]: 
  isFileUpload: true
↓table_id [variables.RequestableVariable-1669198780789]: 
↓fileSeparator [variables.RequestableVariable-1669198780798]: 
  value: ;
↓quoteChar [variables.RequestableVariable-1669285765904]: 
  value: '"'
↓firstLineColumn [variables.RequestableVariable-1669198905193]: 
  value: true
↓chunkSize [variables.RequestableVariable-1669199116278]: 
  value: 200